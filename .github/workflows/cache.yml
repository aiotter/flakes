name: Build flake outputs and cache binaries on cachix

on:
  workflow_call:
    inputs:
      targets:
        description: Build targets (e.g. `.#default .#hello`). Defaults to all packages if not specified.
        required: false
        type: string
      more_disk_space:
        description: Large disk space is needed
        required: false
        type: boolean
    secrets:
      CACHIX_AUTH_TOKEN:
        required: true

env:
  NIXPKGS_ALLOW_UNFREE: 1

jobs:
  cache:
    name: Build targets

    strategy:
      fail-fast: false
      matrix:
        runs-on:
          - macos-latest  # X64-macOS
          - ubuntu-latest # X64-Linux

    outputs:
      X64-macOS: ${{ steps.output.outputs.X64-macOS }}
      ARM64-macOS: ${{ steps.output.outputs.ARM64-macOS }}
      X64-Linux: ${{ steps.output.outputs.X64-Linux }}
      ARM64-Linux: ${{ steps.output.outputs.ARM64-Linux }}

    runs-on: ${{ matrix.runs-on }}

    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: true
        if: runner.os == 'Linux' && inputs.more_disk_space

      - uses: actions/checkout@v4

      - uses: cachix/install-nix-action@v22
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - name: List targets
        uses: mathiasvr/command-output@v2.0.0
        id: targets
        with:
          run: |
            if [[ '${{ inputs.targets }}' ]]; then
              xargs -n1 <<<'${{ inputs.targets }}'
            else
              nix flake show --json | jq -r ".packages.\"$(nix eval --expr builtins.currentSystem --impure --raw)\" | keys[]" | sed 's/^/.#/'
            fi

      - name: Check if the targets can be built
        run: xargs nix build --dry-run <<<'${{ steps.targets.outputs.stdout }}'
        id: check-buildable
        continue-on-error: true

      - name: Setup cachix
        uses: cachix/cachix-action@v14
        with:
          name: aiotter
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        if: ${{ steps.check-buildable.outcome == 'success' }}

      - name: Build
        run: xargs nix --log-lines 99999 build <<<'${{ steps.targets.outputs.stdout }}'
        if: ${{ steps.check-buildable.outcome == 'success' }}

      # runner.arch is one of: [X86, X64, ARM, ARM64]
      # runner.os is one of: [Linux, Windows, macOS]
      - name: Set output (${{ runner.arch }}-${{ runner.os }})
        run: echo "${{ runner.arch }}-${{ runner.os }}=true" >>$GITHUB_OUTPUT
        id: output
        if: ${{ steps.check-buildable.outcome == 'success' }}

      - name: Create job summary
        run: |
          RESULT='${{ job.status == 'success' && '⭕️ Success' || '❌ Failure' }}'
          cat <<EOF >>$GITHUB_STEP_SUMMARY
          ## $(nix eval --expr builtins.currentSystem --impure --raw)
          ### ${RESULT}
          $(sed -e '/^$/d' -e 's/^/- /' <<<'${{ steps.targets.outputs.stdout }}')
          EOF
        if: ${{ steps.check-buildable.outcome == 'success' && ( success() || failure() ) }}

  not-built:
    needs: cache
    if: ${{ !contains(needs.cache.outputs.*, 'true') }}
    runs-on: ubuntu-latest
    steps:
      - name: Output error
        run: echo "::error title=Not built::No target for any of the runners!"; false

  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v22
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - run: nix flake check --show-trace
